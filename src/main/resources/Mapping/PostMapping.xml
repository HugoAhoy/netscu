<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.netscu.netscu.Mapper.PostMapper">
    <insert id="Insert" parameterType="com.netscu.netscu.Entity.Post" useGeneratedKeys="true" keyProperty="id">
        insert into posts(id, uid, cateId, title, summary, content, viewNum, likeNum, collectionNum, supportNum, createTime, isDeleted) values (null, #{uid}, #{cateId}, #{title}, #{summary}, #{content}, 0, 0, 0, 0, current_timestamp, 0 );
    </insert>
    <update id="ModifyById" parameterType="com.netscu.netscu.Entity.Post">
        update posts set cateId = #{cateId}, title=#{title}, summary=#{summary}, content=#{content} where id = #{id} and uid=#{uid};
    </update>
    <update id="DeleteById" parameterType="java.lang.String">
        update posts set isDeleted = 1 where id =#{id} and uid =#{userId};
    </update>

    <select id="GetBasicInfo" parameterType="java.lang.Integer" resultType="Map">
        select id, uid, title, summary, createTime, updateTime, collectionNum, viewNum
            from posts where isDeleted = 0 order by createTime DESC
             limit #{from}, #{to} ;
    </select>

    <select id="GetInfo" parameterType="java.lang.String" resultType="Map">
        select *
            from posts
            natural join (select id as cateId,name as cateName FROM categories) as c
            natural join (select id as uid, name from users) as u
            where id = #{id} and isDeleted = 0;
     </select>

    <update id="AddView" parameterType="java.lang.String">
        update posts set viewNum = viewNum+'1' where id = #{id} and isDeleted = 0;
    </update>

    <insert id="CollectPost" parameterType="java.lang.String">
        insert into collections(id, uid, postId, isDeleted, createTime) values (null, #{userId}, #{id}, 0, current_timestamp );
    </insert>

    <update id="UncollectPost" parameterType="java.lang.String">
        update collections set isDeleted = 1 where postId=#{id} and uid = #{userId};
    </update>

    <insert id="LikePost" parameterType="java.lang.String">
        insert into likepost(id, uid, postId, isDeleted, createTime) values (null, #{userId}, #{id}, 0, current_timestamp );
    </insert>

    <update id="UnlikePost" parameterType="java.lang.String">
        update likepost set isDeleted = 1 where postId=#{id} and uid = #{userId};
    </update>

    <select id="GetMyPost" parameterType="java.lang.Integer" resultType="Map">
        select id, uid, name, title, summary, createTime, updateTime, collectionNum, viewNum, likeNum
            from posts
            natural join (select id as uid, name from users where id = #{userId}) as u
            order by createTime
            limit #{from}, #{to} ;
    </select>

    <update id="IncLike" parameterType="java.lang.String">
        update posts set likeNum = likeNum+'1' where id = #{id};
    </update>

    <update id="DecLike" parameterType="java.lang.String">
        update posts set likeNum = likeNum-'1' where id = #{id};
    </update>

    <update id="IncCollect" parameterType="java.lang.String">
        update posts set collectionNum = collectionNum+'1' where id = #{id};
    </update>

    <update id="DecCollect" parameterType="java.lang.String">
        update posts set collectionNum = collectionNum-'1' where id = #{id};
    </update>


    <select id="GetLikeStatus" parameterType="java.lang.String" resultType="java.lang.Integer">
        select count(*) from likepost where uid =#{userId} and postId=#{id} and isDeleted = 0;
    </select>

    <select id="GetCollectStatus" parameterType="java.lang.String" resultType="java.lang.Integer">
        select count(*) from collections where uid =#{userId} and postId=#{id} and isDeleted = 0;
    </select>

    <select id="GetCollection" parameterType="java.lang.Integer" resultType="Map">
        select id, uid, title, summary, createTime, collectionNum, viewNum, likeNum
            from (select postId as id, createTime from collections where uid =#{userId} and isDeleted = 0) as c
            natural join (select id, uid, title, summary, collectionNum, viewNum, likeNum from posts) as p
            order by createTime
             limit #{from}, #{to};
    </select>

</mapper>